generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  image     String
  createdat DateTime  @default(now())
  updatedat DateTime  @updatedAt
  profile   Profile?
  posts     Post[]
  likes     Like[]
  comments  Comment[]
}

model Profile {
  id          String  @id @default(uuid())
  bio         String?
  screenName  String? @unique
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  imageUrl    String?
  videoUrl    String?
  createdat   DateTime  @default(now())
  updatedat   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        PostTag[]
  likes       Like[]
  comments    Comment[]
  part        Part?
  partId      String?
}

model Part {
  id        String   @id @default(cuid())
  case      String
  weight    Float
  plate     String
  switches  String
  keyCaps   String
  mount     String
  postId    String @unique
  post      Post @relation(fields: [postId], references: [id])
}


model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([postId, tagId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdat DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  body      String
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}