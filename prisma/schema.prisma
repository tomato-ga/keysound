
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  image     String?
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  profile   Profile?
  posts     Post[]
}

model Profile {
  id         String  @id @default(uuid())
  bio        String?
  screenName String? @unique @default(cuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  imageUrl    String?
  videoUrl    String?
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        PostTag[]
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  posts    PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   profileId     String?
//   profile       Profile?
//   accounts      Account[]
//   sessio
// }

// model Profile {
//   id         String  @id @default(cuid())
//   bio        String?
//   screenName String? @unique @default(cuid())
//   userId     String  @unique
//   user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
